package server_test

import (
	"context"
	"encoding/hex"
	"flare-common/policy"
	"flare-common/storage"
	"local/fdc/client/attestation"
	bitvotes "local/fdc/client/attestation/bitVotes"
	"local/fdc/client/config"
	"local/fdc/client/round"
	"local/fdc/server"
	"local/fdc/tests/mocks"
	"math/big"
	"net/http"
	"net/url"
	"os"
	"testing"
	"time"

	"github.com/bradleyjkemp/cupaloy"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

const (
	votingRoundID = 1
	submitAddress = "0xf4Bf90cf71F52b4e0369a356D1F871A6237AD0C4"
)

const (
	requestEVM  = "45564d5472616e73616374696f6e00000000000000000000000000000000000045544800000000000000000000000000000000000000000000000000000000005453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b4500000000000000000000000000000000000000000000000000000000000000204ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000"
	responseEVM = "000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e000000000000000000000000000000000000455448000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066c5d1ff00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a0d3896ffd0af5aa1495e476df0b8e0b08bf7a6df4fccde4e45691f528de71ad0100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013a5aad0000000000000000000000000000000000000000000000000000000066c5d1ff000000000000000000000000e80c39eae57c0359ee6c4086e2b22300353728e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000006800000000000000000000000000000000000000000000000000000000000000524c5adc539000000000000000000000000000000000000000000000000000000000004daf8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000000000000000012b09bea2d61fca3761303ec8fabc041a9482d0c277cd39780826461e110d3c0dee80d4df29c5de801662fee1f4dc8a3f11b26ce0e9deb230ab45d2b4610065bec46ce7c43767e63f555bb7836d2ea2081cdb69a899b488e619bf51c1f397c5b83b49884a0c52566f056d4b359b8051bed3e5b064835fdf9f7920e37fca02989fe77a7b61ee9f7bf46986fbd3d3c195d609c5b18a7f58715809841aa54776ac5aa61fd323a2e65c304a16c37a20daab9dfc597ffbaada2d1b8fc4a91c5c8d2991b5066664893998b0c6b3f5812e26d3a7373ca97e8f4faece835fcaf1c1723300c6735811b5632c073e4a425ad65c90352e2cbb15f4a12cb413c7be801644ff98a1a74eb0c3b31c830f977601ebb62efdfa145d813bfabdeb32a42924f37835e351c77edbedaeca10a6f1dad1577b6a407568237424a468a314d30390385bac7fd6d6a3eef065ab42300bf5b7525f3c9d6022a2fb474ba255191f94b018d0e893f17197e33191959fce4a90d62f88047e27fd7de6ea9d8f7cb148d9b0d4f4ca1ddab3da4d53270084b73900d108ad698cc8ab82846f40000c2e78380ab7f50d4dd38375efba3c7a9256b5f6c487fc036c14eed26a348db74d2bd70e6db55788a308539aeb5b6e742734d29abac54d7794b14b625bce0165964c4422b6445b6f6d36944cfcc07a3ebd62b6d96c6504b33b4eaf117e25586b38c13ccb235ad1e138e884cd06581e2a03c0e4797d871eda7cba7dfa1d2ea8fcd79872466b2bf2ffe2c641d64e92f8b6b4edfce0d8e889dacc58d79cecdd0c5002e3e84585b871b7683000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001403c6c0b19d3ad96ed8cc73a2921304e647b2f000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003615c0184a2b16dbbcd09eae0bf239e28977aa4e6ff2204eda59c14016310bb66000000000000000000000000e80c39eae57c0359ee6c4086e2b22300353728e1000000000000000000000000000000000000000000000000000000000004daf80000000000000000000000000000000000000000000000000000000000000040b09bea2d61fca3761303ec8fabc041a9482d0c277cd39780826461e110d3c0de0000000000000000000000000000000000000000000000000000000066c5d1ff"
)

func TestServer(t *testing.T) {
	rounds := storage.NewCyclic[*round.Round](10)
	serverConfig := config.RestServer{
		Title:       "FDC protocol data provider API",
		FSPTitle:    "FDC protocol data provider for FSP client",
		FSPSubpath:  "/fsp",
		Version:     "0.0.0",
		SwaggerPath: "/api-doc",
		Addr:        "localhost:8080",
		APIKeyName:  "X-API-KEY",
		APIKeys:     []string{"12345", "123456"},
	}

	s := server.New(&rounds, 200, serverConfig)

	ctx, cancel := context.WithTimeout(context.Background(), time.Minute)
	defer cancel()

	go s.Run(ctx)
	defer s.Shutdown()

	hash := common.HexToHash("0x232")

	request, err := hex.DecodeString(requestEVM)

	require.NoError(t, err)

	response, err := hex.DecodeString(responseEVM)

	require.NoError(t, err)

	abiFile, err := os.ReadFile("../tests/configs/abis/EVMTransaction.json")
	require.NoError(t, err)
	abi, err := config.ArgumentsFromABI(abiFile)
	require.NoError(t, err)

	round := round.New(votingRoundID, policy.NewVoterSet(nil, nil, nil))
	round.Attestations = append(round.Attestations, &attestation.Attestation{
		Request:     request,
		Response:    response,
		RoundID:     votingRoundID,
		Consensus:   true,
		Status:      attestation.Success,
		Hash:        hash,
		ResponseABI: &abi,
	})
	rounds.Store(votingRoundID, round)

	bitVote := bitvotes.BitVote{Length: 1, BitVector: big.NewInt(1)}

	round.ConsensusBitVote = bitVote

	//Wait for the server to be ready.
	u := url.URL{Scheme: "http", Host: "localhost:8080", Path: "/health"}
	healthURL := u.String()

	require.Eventually(
		t,
		func() bool {
			rsp, err := http.Get(healthURL)
			if err != nil {
				return false
			}

			return rsp.StatusCode == http.StatusOK
		},
		10*time.Second,
		100*time.Millisecond,
	)

	t.Run("submit1", func(t *testing.T) {
		rspData, err := mocks.MakeGetRequest("submit1", &serverConfig, votingRoundID, submitAddress)
		require.NoError(t, err)

		t.Log(rspData)
		require.Equal(t, server.Ok, rspData.Status)
		cupaloy.SnapshotT(t, rspData)
	})

	var submitString string

	t.Run("submit2", func(t *testing.T) {
		rspData, err := mocks.MakeGetRequest("submit2", &serverConfig, votingRoundID, submitAddress)
		require.NoError(t, err)

		t.Log(rspData)
		require.Equal(t, server.Ok, rspData.Status)

		submitString = rspData.Data

		require.Equal(t, "0x", submitString[0:2])

	})

	t.Run("submitSignatures", func(t *testing.T) {
		rspData, err := mocks.MakeGetRequest("submitSignatures", &serverConfig, votingRoundID, submitAddress)
		require.NoError(t, err)

		t.Log(rspData)
		require.Equal(t, server.Ok, rspData.Status)

		require.Equal(t, "0xc80000000101", rspData.Data[:14])

		require.Equal(t, hash.Hex()[2:], rspData.Data[14:])

		random := rspData.AdditionalData[2:66]

		consensusBitVote := rspData.AdditionalData[66:]

		consensusBitVoteBytes, err := hex.DecodeString(consensusBitVote)
		require.NoError(t, err)

		commitCheck := server.CalculateMaskedRoot(common.HexToHash(rspData.Data), common.HexToHash(random), common.HexToAddress(submitAddress), consensusBitVoteBytes)

		require.Equal(t, submitString[16:], commitCheck)

	})
}
