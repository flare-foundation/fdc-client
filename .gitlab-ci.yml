variables:
  GOLANG_VERSION: "1.21.5"
  GOLINT_VERSION: "v1.59.0"
  COVERAGE_FILE: "coverage.out"
  COBERTURA_FILE: "coverage.xml"

.gocache:
  variables:
    GOPATH: ${CI_PROJECT_DIR}/.go
  before_script:
    - mkdir -p ${GOPATH}
  cache:
    paths:
      - ${GOPATH}/pkg/mod/
      - ${GOPATH}/bin

build:
  stage: build
  image: golang:${GOLANG_VERSION}
  extends: .gocache
  needs: []
  script:
    - go mod download
    - go build ./...

lint:
  stage: test
  needs: []
  image: golangci/golangci-lint:${GOLINT_VERSION}
  extends: .gocache
  script:
    - '! gofmt -l . | grep -q .'
    - golangci-lint run --timeout 5m0s
    - cd flare-common
    - golangci-lint run --timeout 5m0s

test:
  stage: test
  image: golang:${GOLANG_VERSION}
  needs: [build]
  extends: .gocache
  before_script:
    - go get github.com/boumenot/gocover-cobertura
  script:
    - go test -v -coverpkg=local/fdc/... -coverprofile=${COVERAGE_FILE} -covermode count ./...
    - go tool cover -func=${COVERAGE_FILE}
    - go run github.com/boumenot/gocover-cobertura < ${COVERAGE_FILE} > ${COBERTURA_FILE}
    - cd flare-common
    - go test -v ./...
  artifacts:
    paths:
      - ${COVERAGE_FILE}
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${COBERTURA_FILE}
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'

test-common:
  stage: test
  image: golang:${GOLANG_VERSION}
  needs: [build]
  extends: .gocache
  script:
    - cd flare-common
    - go test -v ./...
