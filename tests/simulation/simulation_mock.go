package main

import (
	"flag"

	"gitlab.com/flarenetwork/libs/go-flare-common/pkg/logger"

	"gitlab.com/flarenetwork/fdc/fdc-client/client/config"
	"gitlab.com/flarenetwork/fdc/fdc-client/client/timing"
	"gitlab.com/flarenetwork/fdc/fdc-client/tests/mocks"

	"github.com/ethereum/go-ethereum/ethclient"
)

const (
	SystemDirectory string = "configs/systemConfigs" // relative to project root
)

var (
	CfgFlag = flag.String("config", "configs/userConfig.toml", "Configuration file (toml format)")

	participantsSubmitSecKeys    = []string{"0x28d1bfbbafe9d1d4f5a11c3c16ab6bf9084de48d99fbac4058bdfa3c80b29088", "0x28d1bfbbafe9d1d4f5a11c3c16ab6bf9084de48d99fbac4058bdfa3c80b2908d", "0xb92dccaac0192f8a886371e56539503cb5f57d2760dd53ab0c62259fb98b7f8c", "0xe054b2f3d170aa427dffe941a52c896b61f642e6cbd3e91ff526034debacebfc"}
	participantsSubmitSigSecKeys = []string{"0x28d1bfbbafe9d1d4f5a11c3c16ab6bf9084de48d99fbac4058bdfa3c80b29089", "0x28d1bfbbafe9d1d4f5a11c3c16ab6bf9084de48d99fbac4058bdfa3c80b2908e", "0xbbef1ecbbc00fa11a117900962e29d235a88090761d0446d9e1eb322dfb21658", "0xfb0995e2f723bde3bcea5790a5e9d03bf359024a19e4dd0cd469ad9443dd0872"}

	request      = "45564d5472616e73616374696f6e00000000000000000000000000000000000074657374534742000000000000000000000000000000000000000000000000005453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b4545564d5472616e73616374696f6e00000000000000000000000000000000000045544800000000000000000000000000000000000000000000000000000000005453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b4500000000000000000000000000000000000000000000000000000000000000204ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000"
	response     = "000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e0000000000000000000000000000000000004554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666853c800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001804ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fbbb5500000000000000000000000000000000000000000000000000000000666853c8000000000000000000000000b8b1bca1f986c471ed3ce9586a18ca63db53080a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ca6571daa15ce734bbd0bf27d5c9d16787fc33f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000001e4833bf6c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000fbbb5400000000000000000000000000000000000000000000000000000000000000a80000dae57b41b2c6153ba5398c6e89ca4977c39e11961f17eb32fb8fb642d00c1e677006353f97c936c96e46145cb65369736d83fe759392835e955f53694056023661bf961aada3e0a6722caa365ca49c0cb8fe5ae829686b4f60b3a0f00219090053635e5e8399627ea08de9c326729a9a3517aecb99e45e3d6afb25fd40b30000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001c5dc7876a724e68cb21aa323b56a897c2f976d74eebecd96f6a1e324fc97d20956e62ac1d63acb20522793f1e75f761164603970641655dcbfb733a3386d7624f000000000000000000000000000000000000000000000000000000000000000ddffffffffffc0000f003c000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	verifierPort = 5557
	chainRpc     = "http://127.0.0.1:8545/"
)

func main() {
	flag.Parse()
	userConfig, systemConfig, err := config.ReadConfigs(*CfgFlag, SystemDirectory)
	if err != nil {
		logger.Panicf("cannot read configs: %s", err)
	}
	logger.SetLogger(userConfig.Logging)
	err = timing.Set(systemConfig.Timing)
	if err != nil {
		logger.Panicf("cannot set timing: %s", err)
	}

	go mocks.MockVerifier(verifierPort, response)

	client, err := ethclient.Dial(chainRpc)
	if err != nil {
		logger.Fatal("Error: %s", err)
	}

	go mocks.MockParticipants(systemConfig, participantsSubmitSecKeys, client, request)

	mocks.MockSystemClient(systemConfig, userConfig, client, participantsSubmitSecKeys[0], participantsSubmitSigSecKeys[0])
}
