package attestation_test

import (
	"encoding/hex"
	"math/big"
	"os"
	"testing"

	"local/fdc/client/attestation"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/stretchr/testify/require"
)

const response string = "42616c616e636544656372656173696e675472616e73616374696f6e000000004254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664cbf4c2a3ce5fb95fa6b436fbed49cbccc6dcbb9ee166a3ef217d227cbe5add6898dd20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000664cbf4c06fa5d68b3284548b849dca2ffd9a59350c7440c5be121fe4b4ae0941dcae638000000000000000000000000000000000000000000000000000000000131a3c0000000000000000000000000000000000000000000000000000000add6898dd2"

const requetsEVM = "45564d5472616e73616374696f6e00000000000000000000000000000000000045544800000000000000000000000000000000000000000000000000000000005453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b4500000000000000000000000000000000000000000000000000000000000000204ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000"
const responseEVM = "000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e0000000000000000000000000000000000004554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666853c800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001804ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fbbb5500000000000000000000000000000000000000000000000000000000666853c8000000000000000000000000b8b1bca1f986c471ed3ce9586a18ca63db53080a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ca6571daa15ce734bbd0bf27d5c9d16787fc33f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000001e4833bf6c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000fbbb5400000000000000000000000000000000000000000000000000000000000000a80000dae57b41b2c6153ba5398c6e89ca4977c39e11961f17eb32fb8fb642d00c1e677006353f97c936c96e46145cb65369736d83fe759392835e955f53694056023661bf961aada3e0a6722caa365ca49c0cb8fe5ae829686b4f60b3a0f00219090053635e5e8399627ea08de9c326729a9a3517aecb99e45e3d6afb25fd40b30000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001c5dc7876a724e68cb21aa323b56a897c2f976d74eebecd96f6a1e324fc97d20956e62ac1d63acb20522793f1e75f761164603970641655dcbfb733a3386d7624f000000000000000000000000000000000000000000000000000000000000000ddffffffffffc0000f003c000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

func TestEVM(t *testing.T) {

	var req attestation.Request

	var resp attestation.Response

	req, err := hex.DecodeString(requetsEVM)
	require.NoError(t, err)

	resp, err = hex.DecodeString(responseEVM)

	require.NoError(t, err)

	file, err := os.ReadFile("../../testFiles/configs/abis/EVMTransaction.json")

	require.NoError(t, err)

	var arg abi.Argument

	err = arg.UnmarshalJSON(file)

	require.NoError(t, err)

	evmAbi := abi.Arguments{arg}

	t.Run("isStaticType", func(t *testing.T) {

		ok, err := attestation.IsStaticType(resp)

		require.NoError(t, err)

		require.True(t, !ok)
	})

	t.Run("attestationType", func(t *testing.T) {
		attType, err := req.AttestationType()

		require.NoError(t, err)

		expected, err := hex.DecodeString("45564d5472616e73616374696f6e000000000000000000000000000000000000")

		require.NoError(t, err)

		require.Equal(t, expected, attType[:])

	})

	t.Run("source", func(t *testing.T) {
		source, err := req.Source()

		require.NoError(t, err)

		expected, err := hex.DecodeString("4554480000000000000000000000000000000000000000000000000000000000")

		require.NoError(t, err)

		require.Equal(t, expected, source[:])

	})

	t.Run("attestationType and source", func(t *testing.T) {
		attTypeAndsource, err := req.AttestationTypeAndSource()

		require.NoError(t, err)

		expected, err := hex.DecodeString("45564d5472616e73616374696f6e0000000000000000000000000000000000004554480000000000000000000000000000000000000000000000000000000000")

		require.NoError(t, err)

		require.Equal(t, expected, attTypeAndsource[:])

	})

	t.Run("mic", func(t *testing.T) {
		mic, err := req.Mic()

		require.NoError(t, err)

		expected, err := hex.DecodeString("5453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b45")

		require.NoError(t, err)

		require.Equal(t, expected, mic[:])

	})

	t.Run("mic computed", func(t *testing.T) {
		mic, err := resp.ComputeMic(evmAbi)

		require.NoError(t, err)

		expected, err := hex.DecodeString("5453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b45")

		require.NoError(t, err)

		require.Equal(t, expected, mic[:])

	})

	t.Run("lut", func(t *testing.T) {
		lut, err := resp.LUT()

		require.NoError(t, err)

		require.Equal(t, uint64(1718113224), lut)

	})

	t.Run("add round", func(t *testing.T) {
		_, err := resp.AddRound(12312341)

		require.NoError(t, err)

		require.Equal(t, big.NewInt(1718113224), new(big.Int).SetBytes(resp[128:160]))

	})

}

func TestIsStaticType(t *testing.T) {

	_, err := attestation.IsStaticType([]byte{1, 1, 1})
	require.Error(t, err)

	resp, _ := hex.DecodeString(response)

	ok, err := attestation.IsStaticType(resp)

	require.NoError(t, err)

	require.Equal(t, true, ok)

}

func TestAddRound(t *testing.T) {

	var resp attestation.Response

	resp, err := hex.DecodeString(response)

	require.NoError(t, err)

	_, err = resp.AddRound(9)

	require.NoError(t, err)

	if resp[95] != byte(9) {
		t.Error("fail")
	}

	require.Equal(t, big.NewInt(9), new(big.Int).SetBytes(resp[64:96]))

	_, err = resp.AddRound(257)

	require.NoError(t, err)

	require.Equal(t, big.NewInt(257), new(big.Int).SetBytes(resp[64:96]))

}

func TestComputeMic(t *testing.T) {

	var resp attestation.Response

	resp, _ = hex.DecodeString(response)

	file, err := os.ReadFile("../../configs/abis/BalanceDecreasingTransaction.json")

	require.NoError(t, err)

	var arg abi.Argument

	err = arg.UnmarshalJSON(file)

	require.NoError(t, err)

	args := abi.Arguments{arg}

	mic, err := resp.ComputeMic(args)

	require.NoError(t, err)

	require.Equal(t, "0x2f51362aef7ff57fa4aa74ecca9a5fbaffc123416d7df97226e8635776f06d0b", mic.Hex())

}

func TestHash(t *testing.T) {

	var resp attestation.Response

	resp, err := hex.DecodeString(response)

	require.NoError(t, err)

	hash, err := resp.Hash(0)

	require.NoError(t, err)

	require.Equal(t, "0xf014a6220c448b59f8067a99397b4d3506d17a182df101f23c52825e6c5e1f17", hash.Hex())

}
