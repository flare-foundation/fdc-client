package attestation_test

import (
	"context"
	"flare-common/database"
	"local/fdc/client/attestation"
	"local/fdc/client/config"
	"local/fdc/tests/mocks"
	"math/big"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

const USER_FILE = "../../tests/configs/testConfig.toml" //relative to test

func TestBitVoteFromAttestationsEmpty(t *testing.T) {
	bitVote, err := attestation.BitVoteFromAttestations([]*attestation.Attestation{})
	if err != nil {
		t.Errorf("error: %s", err)
	}

	if bitVote.Length != 0 {
		t.Errorf("wrong length")
	}

	expected := big.NewInt(0)
	if bitVote.BitVector.Cmp(expected) != 0 {
		t.Error("wrong bitvector")
	}
}

func TestBitVoteFromAttestations(t *testing.T) {
	atts := setAttestations(10, []int{3})

	bitVote, err := attestation.BitVoteFromAttestations(atts)
	if err != nil {
		t.Errorf("error: %s", err)
	}

	if bitVote.Length != 10 {
		t.Errorf("wrong length")
	}
	expected, _ := big.NewInt(0).SetString("1001001001", 2)
	if bitVote.BitVector.Cmp(expected) != 0 {
		t.Error("wrong bitvector")
	}
}

var (
	testLog = database.Log{
		Address:         "Cf6798810Bc8C0B803121405Fee2A5a9cc0CA5E5",
		Data:            "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000014045564d5472616e73616374696f6e00000000000000000000000000000000000045544800000000000000000000000000000000000000000000000000000000005453e040c1d33d8852f82714b28959380834b66988fa0348efe38625b3320b4500000000000000000000000000000000000000000000000000000000000000204ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000",
		Topic0:          "251377668af6553101c9bb094ba89c0c536783e005e203625e6cd57345918cc9",
		Topic1:          "NULL",
		Topic2:          "NULL",
		Topic3:          "NULL",
		TransactionHash: "e995790cdbb02e851cd767ee4f36bdf4d172b6fc210a497a505ec9c73330f5d1",
		LogIndex:        0,
		Timestamp:       1718113234,
	}
	testResponse = "000000000000000000000000000000000000000000000000000000000000002045564d5472616e73616374696f6e0000000000000000000000000000000000004554480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000666853c800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001804ff8da95da542ca5e013daf405d08871fdb4375ee6dec77f001e918c8cd8d1b800000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fbbb5500000000000000000000000000000000000000000000000000000000666853c8000000000000000000000000b8b1bca1f986c471ed3ce9586a18ca63db53080a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ca6571daa15ce734bbd0bf27d5c9d16787fc33f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000001e4833bf6c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000fbbb5400000000000000000000000000000000000000000000000000000000000000a80000dae57b41b2c6153ba5398c6e89ca4977c39e11961f17eb32fb8fb642d00c1e677006353f97c936c96e46145cb65369736d83fe759392835e955f53694056023661bf961aada3e0a6722caa365ca49c0cb8fe5ae829686b4f60b3a0f00219090053635e5e8399627ea08de9c326729a9a3517aecb99e45e3d6afb25fd40b30000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001c5dc7876a724e68cb21aa323b56a897c2f976d74eebecd96f6a1e324fc97d20956e62ac1d63acb20522793f1e75f761164603970641655dcbfb733a3386d7624f000000000000000000000000000000000000000000000000000000000000000ddffffffffffc0000f003c000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
)

func TestHandleAttestation(t *testing.T) {
	cfg, err := config.ReadUserRaw(USER_FILE)
	require.NoError(t, err)

	attestationTypesConfigs, err := config.ParseAttestationTypes(cfg.AttestationTypeConfig)
	require.NoError(t, err)

	att, err := attestation.AttestationFromDatabaseLog(testLog)
	require.NoError(t, err)

	err = att.PrepareRequest(attestationTypesConfigs)
	require.NoError(t, err)
	att.Credentials.URL = "http://localhost:5555"

	go mocks.MockVerifierForTests(t, 5555, testResponse, testLog)
	time.Sleep(1 * time.Second)

	err = att.Handle(context.Background())
	require.NoError(t, err)
}

func setAttestations(n int, rules []int) []*attestation.Attestation {
	atts := []*attestation.Attestation{}

	for j := 0; j < n; j++ {
		att := new(attestation.Attestation)
		att.Fee = big.NewInt(10)
		att.Status = attestation.ProcessError

		index := attestation.IndexLog{uint64(j), uint64(j % 2)}

		att.Indexes = append(att.Indexes, index)
		for i := range rules {
			if j%rules[i] == 0 {
				att.Status = attestation.Success
			}
		}

		atts = append(atts, att)
	}

	return atts
}
